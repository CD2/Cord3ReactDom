'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.simpleFormat = exports.truncate = undefined;
exports.capitalize = capitalize;
exports.humanize = humanize;
exports.titleize = titleize;
exports.camelize = camelize;
exports.pluralize = pluralize;
exports.singularize = singularize;

var _pluralize = require('pluralize');

var _pluralize2 = _interopRequireDefault(_pluralize);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function capitalize(str) {
  return str.charAt(0).toUpperCase() + str.slice(1).toLowerCase();
}

function humanize(word) {
  var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
      _ref$capitalize = _ref.capitalize,
      capt = _ref$capitalize === undefined ? true : _ref$capitalize;

  word = word.replace(/^_/, '');
  word = word.replace(/_id$/, '');
  word = word.replace(/(\s+|_)/, ' ');
  word = word.trim();
  if (capt) word = capitalize(word);
  return word;
}

function titleize(str) {
  return humanize(str).split(' ').map(function (word) {
    return capitalize(word);
  }).join(' ');
}

var truncate = exports.truncate = function truncate(text) {
  var _ref2 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
      _ref2$omission = _ref2.omission,
      omission = _ref2$omission === undefined ? '...' : _ref2$omission,
      _ref2$length = _ref2.length,
      truncateAt = _ref2$length === undefined ? 20 : _ref2$length,
      separator = _ref2.separator;

  var maximumLength = truncateAt - omission.length;
  var stop = separator ? text.lastIndexOf(separator, maximumLength) || maximumLength : maximumLength;
  return '' + text.substring(0, stop) + omission;
};

//TODO REMOVE
var simpleFormat = exports.simpleFormat = function simpleFormat(text) {
  if (!text) return '';
  return text.split('\n').map(function (p) {
    return React.createElement('p', { key: p }, p);
  });
};

function camelize(str) {
  var upperCaseFirstLetter = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;

  if (upperCaseFirstLetter) str = capitalize(str);
  return str.replace(/[_.-](\w|$)/g, function (_, x) {
    return x.toUpperCase();
  });
}

function pluralize(count_or_word, single_word, plural_word) {
  if (single_word === undefined) return (0, _pluralize2.default)(count_or_word);

  var count = count_or_word;
  var word = count === 1 || /^1(\.0+)?$/.test(count) ? single_word : plural_word || (0, _pluralize2.default)(single_word);
  return (count || 0) + ' ' + word;
}

function singularize(word) {
  return _pluralize2.default.singular(word);
}
